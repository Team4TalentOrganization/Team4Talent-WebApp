@using StudyGuidance.Web.Models;
@using StudyGuidance.Web.ApiClient;
@inject IJobApiClient JobApiClient
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<div class="vh-100 bg-light container">
	<div class="row">
		<div class="col-10"></div>
		<div class="col-2">
			<button class="btn btn-close" @onclick="GoBackToOverview"></button>
		</div>
	</div>
	<div class="row">
		<div class="col">
			@if (Job != null)
			{
				<div class="row">
					<div class="col">
						<div class="w-50 mx-auto text-center">
							<figure class="shadow rounded-3 m-0 p-0">
								<img class="w-100 h-100 rounded-3" src="/images/person1.jpg" />
							</figure>
							<hr />
						</div>
					</div>
				</div>
				<div class="row">
					<div class="col">
						<h4><strong>@Job.Name</strong></h4>
					</div>
				</div>
				<hr />
				<div class="row">
					<div class="col">
						Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.
					</div>
				</div>
				<hr />
				<div class="row">
					<div class="col">
						@Job.Description
					</div>
				</div>
			}
			else
			{
				<div class="spinner-border text-primary" role="status">
					<span class="visually-hidden">Loading...</span>
				</div>
				<p>Loading job details...</p>
			}
		</div>
	</div>
</div>

@code {
	[Parameter]
	public int Id { get; set; }

	private Job Job;


	protected override async Task OnParametersSetAsync()
	{
		Job = await JobApiClient.GetJobByIdAsync(Id);
	}

	private async Task GoBackToOverview()
	{
		await JSRuntime.InvokeVoidAsync("history.back");
	}
}
