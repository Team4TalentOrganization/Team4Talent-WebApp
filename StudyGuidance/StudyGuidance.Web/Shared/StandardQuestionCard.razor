@inject HttpClient httpClient
@if (!quizEnded)
{
    <Animation Effect="Effect.ZoomIn" Speed="@Speed.Fast">
        <div class="container bg-custom-color" style="width: 70%; height: 350px; position: relative; overflow: hidden; border-radius: 15px;">
            <div class="mt-4" style="width: 48%; height:50%; float:left;">
                <div class="card @CardClasses[0]" @onmouseover="() => MouseOver(0)" @onmouseout="() => MouseOut(0)" @onclick="() => CardClicked(0)">
                    <div class="card-body text-center d-flex align-items-center">
                        <p class="m-auto">@GetAnswersForCurrentQuestion()[0]</p>
                    </div>
                </div>
                <div class="card @CardClasses[1]" @onmouseover="() => MouseOver(1)" @onmouseout="() => MouseOut(1)" @onclick="() => CardClicked(1)">
                    <div class="card-body text-center d-flex align-items-center">
                        <p class="m-auto">@GetAnswersForCurrentQuestion()[1]</p>
                    </div>
                </div>
            </div>
            <div class="mt-4" style="width: 48%; height:50%; float:right;">
                <div class="card @CardClasses[2]" @onmouseover="() => MouseOver(2)" @onmouseout="() => MouseOut(2)" @onclick="() => CardClicked(2)">
                    <div class="card-body text-center d-flex align-items-center">
                        <p class="m-auto">@GetAnswersForCurrentQuestion()[2]</p>
                    </div>
                </div>
                <div class="card @CardClasses[3]" @onmouseover="() => MouseOver(3)" @onmouseout="() => MouseOut(3)" @onclick="() => CardClicked(3)">
                    <div class="card-body text-center d-flex align-items-center">
                        <p class="m-auto">@GetAnswersForCurrentQuestion()[3]</p>
                    </div>
                </div>
            </div>
            <div style="clear: both;"></div>
            <p class="text-white text-center" style="position: absolute; bottom: 17%; left: 50%; transform: translateX(-50%); width:85%">@GetCurrentQuestion()</p>
            @if (currentQuestion > 0)
            {
                <button @onclick="() => previousQuestionClicked()" id="previousButton" type="button" class="btn btn-light btn-circle btn-lg rounded-circle mb-3" style="position: absolute; bottom: 0;">
                    <span style="font-size: 20px;">&lt;</span>
                </button>
            }
        </div>
    </Animation>
    @if (currentQuestion < questions.Count - 1)
    {
        <button @onclick="() => nextQuestionClicked()" disabled="@(!AreAnyCardsSelected())" type="button" class="nextButton btn btn-primary rounded-btn">VOLGENDE VRAAG</button>
    }
    else
    {
        <button @onclick="() => endQuizClicked()" disabled="@(!AreAnyCardsSelected())" type="button" class="nextButton btn btn-primary rounded-btn">EINDE QUIZ</button>
    }
}
else
{
    <TinderQuestionCard></TinderQuestionCard>
}


@code {
    bool quizEnded = false;
    int currentQuestion = 0;

    string[] CardClasses = new string[4] { "card text-black h-50 mb-3", "card text-black h-50 mb-3", "card text-black h-50 mb-3", "card text-black h-50 mb-3" };

    async Task MouseOver(int cardNumber)
    {
        await SetCardClass(cardNumber, CardClasses[cardNumber].Contains("bg-orange-color-click") ? "card text-white bg-orange-color-click h-50 mb-3" : "card text-white bg-orange-color h-50 mb-3");
    }

    async Task MouseOut(int cardNumber)
    {
        await SetCardClass(cardNumber, CardClasses[cardNumber].Contains("bg-orange-color-click") ? "card text-white bg-orange-color-click h-50 mb-3" : "card text-black h-50 mb-3");
    }

    async Task SetCardClass(int cardNumber, string cssClass)
    {
        CardClasses[cardNumber] = cssClass;
    }

    void CardClicked(int cardNumber)
    {
        // Toggle between two states
        if (CardClasses[cardNumber].Contains("bg-orange-color-click"))
        {
            CardClasses[cardNumber] = "card text-black h-50 mb-3";
        }
        else
        {
            CardClasses[cardNumber] = "card text-white bg-orange-color-click h-50 mb-3";
        }
    }


    List<List<string>> answersList = new List<List<string>>
    {
        new List<string> { "MASTER", "BACHELOR", "GRADUAAT", "ANDERE..."},
        new List<string> { "Answer 1A", "Answer 2A", "Answer 3A", "Answer 4A" },
        new List<string> { "Answer 1B", "Answer 2B", "Answer 3B", "Answer 4B" },
        new List<string> { "Answer 1B", "Answer 2B", "Answer 3B", "Answer 4B" },
    };

    private List<string> GetAnswersForCurrentQuestion()
    {
       //return answersList[currentQuestion].Select(option => option.Content).ToList();
       return questions[currentQuestion].Options.Select(option => option.Content).ToList();
    }

    public string GetCurrentQuestion()
    {
        return questions.ElementAt(currentQuestion).Phrase;
    }

    public void nextQuestionClicked()
    {
        currentQuestion = (currentQuestion + 1) % GetAnswersForCurrentQuestion().Count;

        for (int i = 0; i < CardClasses.Length; i++)
        {
            CardClasses[i] = "card text-black h-50 mb-3";
        }
    }

    public async void previousQuestionClicked()
    {
        currentQuestion = (currentQuestion - 1) % GetAnswersForCurrentQuestion().Count;

        for (int i = 0; i < CardClasses.Length; i++)
        {
            CardClasses[i] = "card text-black h-50 mb-3";
        }
    }

    public void endQuizClicked() {
        quizEnded = true;
    }

    public bool AreAnyCardsSelected()
    {
        return CardClasses.Any(cc => cc.Contains("bg-orange-color-click"));
    }

    private List<Question> questions;

    protected override async Task OnInitializedAsync()
    {
        questions = await httpClient.GetFromJsonAsync<List<Question>>("https://localhost:7109/api/Quiz/questions");
    }

    private class Question
    {
        public List<Option> Options { get; set; }
        public int QuestionId { get; set; }
        public string Phrase { get; set; }
    }

    private class Option
    {
        public string Content { get; set; }
        public int OptionRelation { get; set; }
        public int QuestionId { get; set; }
        public int OptionId { get; set; }
    }
}
