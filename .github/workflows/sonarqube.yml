name: SonarQube Scan
env:
  WORKING_DIRECTORY: ./StudyGuidance/
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  PROJECT_NAME: StudyGuidance

on:
  pull_request:
    types: 
    - opened
    branches:
    - main
    - development
  push:
    branches:
      - main
      - development
      - backend-cms

jobs:
  build:
    name: Build and analyze
    runs-on: ubuntu-latest
    permissions: read-all
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0 
      
      - name: Set up JDK 17
        uses: actions/setup-java@v3.13.0
        with:
          distribution: 'temurin'
          java-version: 17
      
      - name: Cache SonarQube packages
        uses: actions/cache@v1
        with:
          path: ~\sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      
      - name: Cache SonarQube scanner
        id: cache-sonar-scanner
        uses: actions/cache@v1
        with:
          path: .\.sonar\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner

      - name: Install SonarCloud scanners
        run: |
          dotnet tool install --global dotnet-sonarscanner
          dotnet tool install --global dotnet-coverage
      
      - name: Build and analyze
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: |
          dotnet-sonarscanner begin /k:"${{ env.PROJECT_NAME }}" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url=${{ secrets.SONAR_HOST_URL }}  /d:sonar.cs.vscoveragexml.reportsPaths=coverage.xml
          dotnet build ${{ env.WORKING_DIRECTORY }}
          dotnet-coverage collect 'dotnet test ${{ env.WORKING_DIRECTORY }}' -f xml  -o 'coverage.xml'
          dotnet-sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"